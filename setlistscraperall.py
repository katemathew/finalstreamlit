{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SessionNotCreatedException",
     "evalue": "Message: session not created: DevToolsActivePort file doesn't exist\nStacktrace:\n0   chromedriver                        0x00000001044ee188 chromedriver + 4596104\n1   chromedriver                        0x00000001044e5ef3 chromedriver + 4562675\n2   chromedriver                        0x00000001040e939a chromedriver + 381850\n3   chromedriver                        0x00000001041215c4 chromedriver + 611780\n4   chromedriver                        0x000000010411cec3 chromedriver + 593603\n5   chromedriver                        0x00000001041191a3 chromedriver + 577955\n6   chromedriver                        0x0000000104160ea9 chromedriver + 872105\n7   chromedriver                        0x0000000104154ee3 chromedriver + 823011\n8   chromedriver                        0x0000000104125be4 chromedriver + 629732\n9   chromedriver                        0x000000010412679e chromedriver + 632734\n10  chromedriver                        0x00000001044b40a2 chromedriver + 4358306\n11  chromedriver                        0x00000001044b8ced chromedriver + 4377837\n12  chromedriver                        0x00000001044b8663 chromedriver + 4376163\n13  chromedriver                        0x00000001044b8f95 chromedriver + 4378517\n14  chromedriver                        0x000000010449dac5 chromedriver + 4266693\n15  chromedriver                        0x00000001044b931d chromedriver + 4379421\n16  chromedriver                        0x0000000104490110 chromedriver + 4210960\n17  chromedriver                        0x00000001044d6b58 chromedriver + 4500312\n18  chromedriver                        0x00000001044d6cd1 chromedriver + 4500689\n19  chromedriver                        0x00000001044e5b33 chromedriver + 4561715\n20  libsystem_pthread.dylib             0x00007ff8081e54f4 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff8081e100f thread_start + 15\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mSessionNotCreatedException\u001b[0m                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 91\u001b[0m\n\u001b[1;32m     88\u001b[0m     driver\u001b[38;5;241m.\u001b[39mquit()\n\u001b[1;32m     90\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m---> 91\u001b[0m     main()\n\u001b[1;32m     95\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCSV file has been updated with the latest detailed data for all setlists.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "Cell \u001b[0;32mIn[1], line 64\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmain\u001b[39m():\n\u001b[1;32m     63\u001b[0m     service \u001b[38;5;241m=\u001b[39m Service(executable_path\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/Users/kater/Downloads/chromedriver-mac-x64/chromedriver\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 64\u001b[0m     driver \u001b[38;5;241m=\u001b[39m webdriver\u001b[38;5;241m.\u001b[39mChrome(service\u001b[38;5;241m=\u001b[39mservice)\n\u001b[1;32m     66\u001b[0m     \u001b[38;5;66;03m# change URL to the artist data wanted to scrape on setlist fm\u001b[39;00m\n\u001b[1;32m     67\u001b[0m     artist_main_url \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhttps://www.setlist.fm/setlists/olivia-rodrigo-bc9194e.html\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45\u001b[0m, in \u001b[0;36mWebDriver.__init__\u001b[0;34m(self, options, service, keep_alive)\u001b[0m\n\u001b[1;32m     42\u001b[0m service \u001b[38;5;241m=\u001b[39m service \u001b[38;5;28;01mif\u001b[39;00m service \u001b[38;5;28;01melse\u001b[39;00m Service()\n\u001b[1;32m     43\u001b[0m options \u001b[38;5;241m=\u001b[39m options \u001b[38;5;28;01mif\u001b[39;00m options \u001b[38;5;28;01melse\u001b[39;00m Options()\n\u001b[0;32m---> 45\u001b[0m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(\n\u001b[1;32m     46\u001b[0m     browser_name\u001b[38;5;241m=\u001b[39mDesiredCapabilities\u001b[38;5;241m.\u001b[39mCHROME[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbrowserName\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m     47\u001b[0m     vendor_prefix\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgoog\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m     48\u001b[0m     options\u001b[38;5;241m=\u001b[39moptions,\n\u001b[1;32m     49\u001b[0m     service\u001b[38;5;241m=\u001b[39mservice,\n\u001b[1;32m     50\u001b[0m     keep_alive\u001b[38;5;241m=\u001b[39mkeep_alive,\n\u001b[1;32m     51\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61\u001b[0m, in \u001b[0;36mChromiumDriver.__init__\u001b[0;34m(self, browser_name, vendor_prefix, options, service, keep_alive)\u001b[0m\n\u001b[1;32m     52\u001b[0m executor \u001b[38;5;241m=\u001b[39m ChromiumRemoteConnection(\n\u001b[1;32m     53\u001b[0m     remote_server_addr\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mservice\u001b[38;5;241m.\u001b[39mservice_url,\n\u001b[1;32m     54\u001b[0m     browser_name\u001b[38;5;241m=\u001b[39mbrowser_name,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     57\u001b[0m     ignore_proxy\u001b[38;5;241m=\u001b[39moptions\u001b[38;5;241m.\u001b[39m_ignore_local_proxy,\n\u001b[1;32m     58\u001b[0m )\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 61\u001b[0m     \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(command_executor\u001b[38;5;241m=\u001b[39mexecutor, options\u001b[38;5;241m=\u001b[39moptions)\n\u001b[1;32m     62\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m     63\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mquit()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208\u001b[0m, in \u001b[0;36mWebDriver.__init__\u001b[0;34m(self, command_executor, keep_alive, file_detector, options)\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_authenticator_id \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    207\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstart_client()\n\u001b[0;32m--> 208\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstart_session(capabilities)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292\u001b[0m, in \u001b[0;36mWebDriver.start_session\u001b[0;34m(self, capabilities)\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Creates a new session with the desired capabilities.\u001b[39;00m\n\u001b[1;32m    286\u001b[0m \n\u001b[1;32m    287\u001b[0m \u001b[38;5;124;03m:Args:\u001b[39;00m\n\u001b[1;32m    288\u001b[0m \u001b[38;5;124;03m - capabilities - a capabilities dict to start the session with.\u001b[39;00m\n\u001b[1;32m    289\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    291\u001b[0m caps \u001b[38;5;241m=\u001b[39m _create_caps(capabilities)\n\u001b[0;32m--> 292\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexecute(Command\u001b[38;5;241m.\u001b[39mNEW_SESSION, caps)[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    293\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msession_id \u001b[38;5;241m=\u001b[39m response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msessionId\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    294\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcaps \u001b[38;5;241m=\u001b[39m response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcapabilities\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347\u001b[0m, in \u001b[0;36mWebDriver.execute\u001b[0;34m(self, driver_command, params)\u001b[0m\n\u001b[1;32m    345\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_executor\u001b[38;5;241m.\u001b[39mexecute(driver_command, params)\n\u001b[1;32m    346\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response:\n\u001b[0;32m--> 347\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39merror_handler\u001b[38;5;241m.\u001b[39mcheck_response(response)\n\u001b[1;32m    348\u001b[0m     response[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_unwrap_value(response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    349\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229\u001b[0m, in \u001b[0;36mErrorHandler.check_response\u001b[0;34m(self, response)\u001b[0m\n\u001b[1;32m    227\u001b[0m         alert_text \u001b[38;5;241m=\u001b[39m value[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malert\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    228\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace, alert_text)  \u001b[38;5;66;03m# type: ignore[call-arg]  # mypy is not smart enough here\u001b[39;00m\n\u001b[0;32m--> 229\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace)\n",
      "\u001b[0;31mSessionNotCreatedException\u001b[0m: Message: session not created: DevToolsActivePort file doesn't exist\nStacktrace:\n0   chromedriver                        0x00000001044ee188 chromedriver + 4596104\n1   chromedriver                        0x00000001044e5ef3 chromedriver + 4562675\n2   chromedriver                        0x00000001040e939a chromedriver + 381850\n3   chromedriver                        0x00000001041215c4 chromedriver + 611780\n4   chromedriver                        0x000000010411cec3 chromedriver + 593603\n5   chromedriver                        0x00000001041191a3 chromedriver + 577955\n6   chromedriver                        0x0000000104160ea9 chromedriver + 872105\n7   chromedriver                        0x0000000104154ee3 chromedriver + 823011\n8   chromedriver                        0x0000000104125be4 chromedriver + 629732\n9   chromedriver                        0x000000010412679e chromedriver + 632734\n10  chromedriver                        0x00000001044b40a2 chromedriver + 4358306\n11  chromedriver                        0x00000001044b8ced chromedriver + 4377837\n12  chromedriver                        0x00000001044b8663 chromedriver + 4376163\n13  chromedriver                        0x00000001044b8f95 chromedriver + 4378517\n14  chromedriver                        0x000000010449dac5 chromedriver + 4266693\n15  chromedriver                        0x00000001044b931d chromedriver + 4379421\n16  chromedriver                        0x0000000104490110 chromedriver + 4210960\n17  chromedriver                        0x00000001044d6b58 chromedriver + 4500312\n18  chromedriver                        0x00000001044d6cd1 chromedriver + 4500689\n19  chromedriver                        0x00000001044e5b33 chromedriver + 4561715\n20  libsystem_pthread.dylib             0x00007ff8081e54f4 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff8081e100f thread_start + 15\n"
     ]
    }
   ],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from bs4 import BeautifulSoup\n",
    "from urllib.parse import urljoin\n",
    "import time\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def fetch_all_setlist_urls(artist_url, driver):\n",
    "    driver.get(artist_url)\n",
    "    time.sleep(5)\n",
    "    soup = BeautifulSoup(driver.page_source, 'html.parser')\n",
    "    setlist_links = soup.find_all('a', href=True, class_='summary url')\n",
    "    setlist_urls = [urljoin(\"https://www.setlist.fm\", link['href']) for link in setlist_links]\n",
    "    return setlist_urls\n",
    "\n",
    "def fetch_setlist_data(url, driver):\n",
    "    driver.get(url)\n",
    "    time.sleep(5)\n",
    "    soup = BeautifulSoup(driver.page_source, 'html.parser')\n",
    "\n",
    "    artist_element = soup.find(class_='setlistHeadline')\n",
    "    if artist_element:\n",
    "        artist_text = artist_element.text.strip()\n",
    "        print(f\"Raw artist text: {artist_text}\")\n",
    "        \n",
    "        if ' at ' in artist_text:\n",
    "            artist_name = artist_text.split(' at ')[0].replace('Setlist', '').strip()\n",
    "        else:\n",
    "            artist_name = artist_text.replace('Setlist', '').strip()\n",
    "    else:\n",
    "        artist_name = \"Artist not found\"\n",
    "\n",
    "    date_location_element = soup.find('div', class_='dateBlock')\n",
    "    date_location = ' '.join(date_location_element.text.split()) if date_location_element else \"Date and location not found\"\n",
    "    location_name = soup.select_one('a[title^=\"More setlists from\"] > span').text.strip()\n",
    "\n",
    "    start_time_element = soup.find('div', class_='mainTime', string=lambda t: \"PM\" in t or \"AM\" in t)\n",
    "    start_time = start_time_element.text.strip() if start_time_element else \"Start time not found\"\n",
    "\n",
    "    tour_avg_duration_element = soup.find('div', class_='mainTime', string=lambda t: \"h\" in t and \"m\" in t)\n",
    "    tour_avg_duration = tour_avg_duration_element.text.strip() if tour_avg_duration_element else \"Tour duration not found\"\n",
    "\n",
    "    songs_elements = soup.find('ol', class_='songsList')\n",
    "    songs = [song_part.text.strip() for song_part in songs_elements.find_all('div', class_='songPart')] if songs_elements else []\n",
    "\n",
    "    data = {\n",
    "        'Artist': artist_name,\n",
    "        'Date and Location': date_location,\n",
    "        'Location Name': location_name,\n",
    "        'Start Time': start_time,\n",
    "        'Tour Average Duration': tour_avg_duration,\n",
    "        'Songs': [songs],\n",
    "    }\n",
    "\n",
    "    return pd.DataFrame([data])\n",
    "\n",
    "\n",
    "\n",
    "import os\n",
    "\n",
    "def main():\n",
    "    service = Service(executable_path='/Users/kater/Downloads/chromedriver-mac-x64/chromedriver')\n",
    "    driver = webdriver.Chrome(service=service)\n",
    "    \n",
    "    # change URL to the artist data wanted to scrape on setlist fm\n",
    "    artist_main_url = 'https://www.setlist.fm/setlists/olivia-rodrigo-bc9194e.html'\n",
    "    setlist_urls = fetch_all_setlist_urls(artist_main_url, driver)\n",
    "    \n",
    "    all_setlists_data = []\n",
    "    for url in setlist_urls:\n",
    "        print(f\"Processing setlist URL: {url}\")\n",
    "        setlist_data = fetch_setlist_data(url, driver)\n",
    "        all_setlists_data.append(setlist_data)\n",
    "    \n",
    "    combined_df = pd.concat(all_setlists_data, ignore_index=True)\n",
    "    exploded_df = combined_df.explode('Songs')\n",
    "\n",
    "    csv_file_path = 'setlist_data_detailed.csv'\n",
    "\n",
    "    if os.path.exists(csv_file_path):\n",
    "        exploded_df.to_csv(csv_file_path, mode='a', header=False, index=False)\n",
    "    else:\n",
    "        exploded_df.to_csv(csv_file_path, mode='w', header=True, index=False)\n",
    "    \n",
    "    print(\"CSV file has been updated with the latest detailed data for all setlists.\")\n",
    "\n",
    "    driver.quit()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n",
    "\n",
    "\n",
    "print(\"CSV file has been updated with the latest detailed data for all setlists.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
